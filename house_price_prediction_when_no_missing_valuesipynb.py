# -*- coding: utf-8 -*-
"""house price prediction when no missing valuesipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WmBuv-Iin4TBc4t1gnkOnftC7MOrp95T
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import metrics
from xgboost import XGBRegressor
import sklearn.datasets
import matplotlib.pyplot as plt
import seaborn as sns

house_price_dataset=sklearn.datasets.load_boston()

print(house_price_dataset)

house_price_dataframe=pd.DataFrame(house_price_dataset.data,columns=house_price_dataset.feature_names)

print(house_price_dataframe)

house_price_dataframe.head()

house_price_dataframe['PRICE']=house_price_dataset.target

house_price_dataframe.head()

"""correlation"""

corr_matrix=house_price_dataframe.corr()
corr_matrix['PRICE'].sort_values(ascending=False)

X=house_price_dataframe.drop(['PRICE'],axis=1)
Y=house_price_dataframe['PRICE']

print(X)
print(Y)

"""test train splitting"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2, random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""training model"""

model=XGBRegressor()

model.fit(X_train,Y_train)

"""evaluation"""

training_data_prediction=model.predict(X_train)

print(training_data_prediction)

"""visualising"""

plt.scatter(Y_train,training_data_prediction)
plt.xlabel("actual price")
plt.ylabel("predicted price")
plt.title("actual price vs predicted price ")

"""prediction on test"""

test_data_prediction=model.predict(X_test)

"""r sq error"""

error_r_sq=metrics.r2_score(Y_test,test_data_prediction)

print(error_r_sq)

error_m_abs=metrics.mean_absolute_error(Y_test,test_data_prediction)

print(error_m_abs)

